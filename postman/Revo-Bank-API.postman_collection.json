{
  "info": {
    "_postman_id": "revo-bank-api-collection",
    "name": "Revo Bank API",
    "description": "Complete API collection for Revo Bank Backend - Authentication, User Management, Account Management & Transaction Processing with Indonesian Rupiah support",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "revo-bank"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful registration",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.token_type).to.eql('Bearer');",
                  "});",
                  "",
                  "// Save token for future requests",
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "    pm.environment.set('user_id', jsonData.user.id);",
                  "    pm.environment.set('user_email', jsonData.user.email);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"budi.santoso@gmail.com\",\n  \"password\": \"password123\",\n  \"name\": \"Budi Santoso\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account. Returns JWT token and user information."
          },
          "response": [
            {
              "name": "Successful Registration",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"budi.santoso@gmail.com\",\n  \"password\": \"password123\",\n  \"name\": \"Budi Santoso\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/register",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "register"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": \"7d\",\n  \"user\": {\n    \"id\": 1,\n    \"email\": \"budi.santoso@gmail.com\",\n    \"name\": \"Budi Santoso\",\n    \"createdAt\": \"2025-01-27T10:00:00.000Z\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful login",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.token_type).to.eql('Bearer');",
                  "});",
                  "",
                  "// Save token for future requests",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "    pm.environment.set('user_id', jsonData.user.id);",
                  "    pm.environment.set('user_email', jsonData.user.email);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"budi.santoso@gmail.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate user with email and password. Returns JWT token."
          },
          "response": [
            {
              "name": "Successful Login",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"budi.santoso@gmail.com\",\n  \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "login"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": \"7d\",\n  \"user\": {\n    \"id\": 1,\n    \"email\": \"budi.santoso@gmail.com\",\n    \"name\": \"Budi Santoso\",\n    \"createdAt\": \"2025-01-27T10:00:00.000Z\"\n  }\n}"
            }
          ]
        }
      ],
      "description": "Authentication endpoints for user registration and login"
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "    pm.expect(jsonData).to.not.have.property('password');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/profile",
              "host": ["{{base_url}}"],
              "path": ["user", "profile"]
            },
            "description": "Get current authenticated user's profile information"
          },
          "response": [
            {
              "name": "Get Profile Success",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/user/profile",
                  "host": ["{{base_url}}"],
                  "path": ["user", "profile"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": 1,\n  \"email\": \"budi.santoso@gmail.com\",\n  \"name\": \"Budi Santoso\",\n  \"createdAt\": \"2025-01-27T10:00:00.000Z\"\n}"
            }
          ]
        },
        {
          "name": "Update User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Budi Santoso Updated\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/user/profile",
              "host": ["{{base_url}}"],
              "path": ["user", "profile"]
            },
            "description": "Update current user's profile information"
          },
          "response": [
            {
              "name": "Update Profile Success",
              "originalRequest": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Budi Santoso Updated\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/user/profile",
                  "host": ["{{base_url}}"],
                  "path": ["user", "profile"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": 1,\n  \"email\": \"budi.santoso@gmail.com\",\n  \"name\": \"Budi Santoso Updated\",\n  \"createdAt\": \"2025-01-27T10:00:00.000Z\"\n}"
            }
          ]
        },
        {
          "name": "Update User Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Password updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.not.have.property('password');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/user/profile",
              "host": ["{{base_url}}"],
              "path": ["user", "profile"]
            },
            "description": "Update current user's password"
          },
          "response": []
        },
        {
          "name": "Delete User Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "// Clear tokens after account deletion",
                  "pm.environment.unset('access_token');",
                  "pm.environment.unset('user_id');",
                  "pm.environment.unset('user_email');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/profile",
              "host": ["{{base_url}}"],
              "path": ["user", "profile"]
            },
            "description": "Delete current user's account permanently"
          },
          "response": [
            {
              "name": "Delete Account Success",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/user/profile",
                  "host": ["{{base_url}}"],
                  "path": ["user", "profile"]
                }
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": null,
              "header": [],
              "body": null
            }
          ]
        }
      ],
      "description": "User profile management endpoints"
    },
    {
      "name": "Account Management",
      "item": [
        {
          "name": "Create Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Account created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('balance');",
                  "    pm.expect(jsonData.balance).to.eql(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"balance\": 0\n}"
            },
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            },
            "description": "Create a new bank account for the authenticated user"
          },
          "response": []
        },
        {
          "name": "Get All Accounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            },
            "description": "Get all accounts belonging to the authenticated user"
          },
          "response": []
        },
        {
          "name": "Get Account by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Account details returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('balance');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/1",
              "host": ["{{base_url}}"],
              "path": ["accounts", "1"]
            },
            "description": "Get specific account by ID (must belong to authenticated user)"
          },
          "response": []
        },
        {
          "name": "Delete Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/1",
              "host": ["{{base_url}}"],
              "path": ["accounts", "1"]
            },
            "description": "Delete an account (must belong to authenticated user)"
          },
          "response": []
        }
      ],
      "description": "Bank account management endpoints"
    },
    {
      "name": "Transaction Management",
      "item": [
        {
          "name": "Deposit Money",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Get user accounts to use valid account ID",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('base_url') + '/accounts',",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Authorization': 'Bearer ' + pm.environment.get('access_token')",
                  "    }",
                  "}, function (err, response) {",
                  "    if (err) {",
                  "        console.log('Error getting accounts:', err);",
                  "        return;",
                  "    }",
                  "    ",
                  "    const accounts = response.json();",
                  "    if (accounts && accounts.length > 0) {",
                  "        // Use first account for deposit",
                  "        pm.environment.set('deposit_account_id', accounts[0].id);",
                  "    } else {",
                  "        console.log('No accounts found. Please create an account first.');",
                  "        pm.environment.set('deposit_account_id', 'NO_ACCOUNTS');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Deposit successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.type).to.eql('DEPOSIT');",
                  "    pm.expect(jsonData).to.have.property('amount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accountId\": {{deposit_account_id}},\n  \"amount\": 500000\n}"
            },
            "url": {
              "raw": "{{base_url}}/transactions/deposit",
              "host": ["{{base_url}}"],
              "path": ["transactions", "deposit"]
            },
            "description": "Deposit money to an account (Rp 500,000). Auto-detects valid account ID from your accounts."
          },
          "response": []
        },
        {
          "name": "Withdraw Money",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Get user accounts to use valid account ID",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('base_url') + '/accounts',",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Authorization': 'Bearer ' + pm.environment.get('access_token')",
                  "    }",
                  "}, function (err, response) {",
                  "    if (err) {",
                  "        console.log('Error getting accounts:', err);",
                  "        return;",
                  "    }",
                  "    ",
                  "    const accounts = response.json();",
                  "    if (accounts && accounts.length > 0) {",
                  "        // Use first account for withdrawal",
                  "        pm.environment.set('withdraw_account_id', accounts[0].id);",
                  "    } else {",
                  "        console.log('No accounts found. Please create an account first.');",
                  "        pm.environment.set('withdraw_account_id', 'NO_ACCOUNTS');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Withdrawal successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.type).to.eql('WITHDRAWAL');",
                  "    pm.expect(jsonData).to.have.property('amount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accountId\": {{withdraw_account_id}},\n  \"amount\": 100000\n}"
            },
            "url": {
              "raw": "{{base_url}}/transactions/withdraw",
              "host": ["{{base_url}}"],
              "path": ["transactions", "withdraw"]
            },
            "description": "Withdraw money from an account (Rp 100,000). Auto-detects valid account ID from your accounts."
          },
          "response": []
        },
        {
          "name": "Transfer Money",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Get user accounts to use valid account IDs",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('base_url') + '/accounts',",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Authorization': 'Bearer ' + pm.environment.get('access_token')",
                  "    }",
                  "}, function (err, response) {",
                  "    if (err) {",
                  "        console.log('Error getting accounts:', err);",
                  "        return;",
                  "    }",
                  "    ",
                  "    const accounts = response.json();",
                  "    if (accounts && accounts.length >= 2) {",
                  "        // Use first account as source, second as destination",
                  "        pm.environment.set('from_account_id', accounts[0].id);",
                  "        pm.environment.set('to_account_id', accounts[1].id);",
                  "    } else if (accounts && accounts.length === 1) {",
                  "        // If only one account, we need to create another one first",
                  "        console.log('Only one account found. Please create another account first.');",
                  "        pm.environment.set('from_account_id', accounts[0].id);",
                  "        pm.environment.set('to_account_id', 'NEED_SECOND_ACCOUNT');",
                  "    } else {",
                  "        console.log('No accounts found. Please create accounts first.');",
                  "        pm.environment.set('from_account_id', 'NO_ACCOUNTS');",
                  "        pm.environment.set('to_account_id', 'NO_ACCOUNTS');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Transfer successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transferOut');",
                  "    pm.expect(jsonData).to.have.property('transferIn');",
                  "    pm.expect(jsonData.transferOut.type).to.eql('TRANSFER_OUT');",
                  "    pm.expect(jsonData.transferIn.type).to.eql('TRANSFER_IN');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fromAccountId\": {{from_account_id}},\n  \"toAccountId\": {{to_account_id}},\n  \"amount\": 250000\n}"
            },
            "url": {
              "raw": "{{base_url}}/transactions/transfer",
              "host": ["{{base_url}}"],
              "path": ["transactions", "transfer"]
            },
            "description": "Transfer money between accounts (Rp 250,000). Auto-detects valid account IDs from your accounts."
          },
          "response": []
        },
        {
          "name": "Get All Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/transactions",
              "host": ["{{base_url}}"],
              "path": ["transactions"]
            },
            "description": "Get all transactions for authenticated user's accounts"
          },
          "response": []
        },
        {
          "name": "Get Transaction by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Transaction details returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('type');",
                  "    pm.expect(jsonData).to.have.property('amount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/transactions/1",
              "host": ["{{base_url}}"],
              "path": ["transactions", "1"]
            },
            "description": "Get specific transaction by ID (must belong to authenticated user)"
          },
          "response": []
        }
      ],
      "description": "Banking transaction endpoints with Indonesian Rupiah amounts"
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Application Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Application is running\", function () {",
                  "    pm.expect(pm.response.text()).to.include('Hello World');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            },
            "description": "Check if the application is running (public endpoint)"
          },
          "response": [
            {
              "name": "Health Check Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/",
                  "host": ["{{base_url}}"],
                  "path": [""]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html; charset=utf-8"
                }
              ],
              "body": "Hello World!"
            }
          ]
        }
      ],
      "description": "Health check and status endpoints"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "console.log('Response status:', pm.response.status);",
          "console.log('Response time:', pm.response.responseTime, 'ms');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string",
      "description": "JWT access token for authenticated requests"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "Current user ID"
    },
    {
      "key": "user_email",
      "value": "",
      "type": "string",
      "description": "Current user email"
    }
  ]
}
